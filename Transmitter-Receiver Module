
/****************************************************************************/
/********This module consists of both CDMA transmitter and receiver blocks********/
/****************************************************************************/

module transmitter(CLOCK_50,cdma_out, data1, data2, valid);
input CLOCK_50 ;
output [2:0] cdma_out; 
output [1:0] data1; 
output [1:0] data2; 
output reg valid;  //used for storing & displaying only the required output 
reg signed [1:0] d1=0; //used for storing user 1's  modulated data = user1*chip1
reg signed [1:0] d2=0; //used for storing user 2's  modulated data = user2*chip2
wire signed [2:0] cdma_out; //final output from the transmitter = user1*chip1 (8 chips) + user2*chip2 (8 chips)
reg signed [1:0] data1; // user 1 data decoded at the receiver
reg signed [1:0] data2; // user 2 data decoded at the receive
integer x=0; //counter for chip sequence
integer y=0; //counter for data sequence
integer z=0; //correlator variable for user 1
integer n=0; //correlator variable for user 2

/*********chip sequence for user 1*********/
reg signed [1:0] a0 =  2'd1 ;
reg signed [1:0] a1 =  2'd1 ;
reg signed [1:0] a2 =  2'd1 ;
reg signed [1:0] a3 =  -2'd1 ;
reg signed [1:0] a4 =  2'd1 ;
reg signed [1:0] a5 =  -2'd1 ;
reg signed [1:0] a6 =  -2'd1 ;
reg signed [1:0] a7 =  -2'd1 ;
reg signed [1:0] a8 =  2'd0 ;
reg signed [1:0] a9 =  2'd0 ;
 
/*********chip sequence for user 2*********/
reg signed [1:0] b0 =  2'd1 ;
reg signed [1:0] b1 =  -2'd1 ;
reg signed [1:0] b2 =  2'd1 ;
reg signed [1:0] b3 =  2'd1 ;
reg signed [1:0] b4 =  2'd1 ;
reg signed [1:0] b5 =  -2'd1 ;
reg signed [1:0] b6 =  2'd1 ;
reg signed [1:0] b7 =  2'd1 ;
reg signed [1:0] b8 =  2'd0 ;
reg signed [1:0] b9 =  2'd0 ;

/*********user 1 data*********/
reg signed [1:0] user10=-2'd1;
reg signed [1:0] user11=2'd1;

/*********user 2 data*********/	
reg signed [1:0] user20=2'd1;
reg signed [1:0] user21=-2'd1;

/*********Procedural Block*********/
always@(posedge CLOCK_50)
begin
//This part of the code is to parse through the respective chip & data sequences for both users for necessary calculations //  	
	if (x>=9)
	begin
		d1<=0;
		d2<=0;
		x<=0;
		y<=y+1;
		data1<=z/8;
		z<=0;
		data2<=n/8;
		n<=0;
	end
	else	
	begin
		x<=x+1;
		case(x)
		0: case(y)
			0: begin
				d1<=a0*user10;
				d2<=b0*user20;
				end
				
			1: begin
				d1<=a0*user11;
				d2<=b0*user21;
				end
			endcase
		1: case(y)
			0: begin
				d1<=a1*user10;
				d2<=b1*user20;
				z<=z+cdma_out*a0;
				n<=n+cdma_out*b0;
				end
			1: begin
				d1<=a1*user11;
				d2<=b1*user21;
				z<=z+cdma_out*a0;
				n<=n+cdma_out*b0;
				end
			endcase
		2: case(y)
			0: begin
				d1<=a2*user10;
				d2<=b2*user20;
				z<=z+cdma_out*a1;
				n<=n+cdma_out*b1;
				end
			1: begin
				d1<=a2*user11;
				d2<=b2*user21;
				z<=z+cdma_out*a1;
				n<=n+cdma_out*b1;
				end
			 endcase
		3: case(y)
			0: begin
				d1<=a3*user10;
				d2<=b3*user20;
				z<=z+cdma_out*a2;
				n<=n+cdma_out*b2;
				end
			1: begin
				d1<=a3*user11;
				d2<=b3*user21;
				z<=z+cdma_out*a2;
				n<=n+cdma_out*b2;
				end
			endcase
		4: case(y)
			0: begin
				d1<=a4*user10;
				d2<=b4*user20;
				z<=z+cdma_out*a3;
				n<=n+cdma_out*b3;
				end
			1: begin
				d1<=a4*user11;
				d2<=b4*user21;
				z<=z+cdma_out*a3;
				n<=n+cdma_out*b3;
				end
			endcase
		5: case(y)
			0: begin
				d1<=a5*user10;
				d2<=b5*user20;
				z<=z+cdma_out*a4;
				n<=n+cdma_out*b4;
				end
			1: begin
				d1<=a5*user11;
				d2<=b5*user21;
				z<=z+cdma_out*a4;
				n<=n+cdma_out*b4;
				end
			endcase
		6: case(y)
			0: begin
				d1<=a6*user10;
				d2<=b6*user20;
				z<=z+cdma_out*a5;
				n<=n+cdma_out*b5;
				end
			1: begin
				d1<=a6*user11;
				d2<=b6*user21;
				z<=z+cdma_out*a5;
				n<=n+cdma_out*b5;
				end
			endcase
		7: case(y)
			0: begin
				d1<=a7*user10;
				d2<=b7*user20;
				z<=z+cdma_out*a6;
				n<=n+cdma_out*b6;
				end
			1: begin
				d1<=a7*user11;
				d2<=b7*user21;
				z<=z+cdma_out*a6;
				n<=n+cdma_out*b6;
				end
			endcase
		8: case(y)
			0: begin
				d1<=a8*user10;
				d2<=b8*user20;
				z<=z+cdma_out*a7;
				n<=n+cdma_out*b7;
				end
			1: begin
				d1<=a8*user11;
				d2<=b8*user21;
				z<=z+cdma_out*a7;
				n<=n+cdma_out*b7;
				end
			endcase
		9: case(y)
			0: begin
				d1<=a9*user10;
				d2<=b9*user20;
				z<=z+cdma_out*a8;
				n<=n+cdma_out*b8;
				end
			1: begin
				d1<=a9*user11;
				d2<=b9*user21;
				z<=z+cdma_out*a8;
				n<=n+cdma_out*b8;
				end
			endcase
		endcase
	end

/************calculation to ensure the right output is stored & displayed************/	
	if (data1==1||data2==1||data1==-1||data2==-1)
		valid=1;
	else
		valid=0;
	
end
assign cdma_out=d1+d2; // transmitter output = sum of user1's modulated data with user2's modulated data
endmodule	 
		
